package com.iocl.customer.model.viewobject.Loyalty;

//import com.rsa.certj.cert.attributes.Gender;
import com.iocl.customer.model.utils.EPICConstant;

import com.iocl.customer.model.utils.EPICIOCLResourceModel;

import java.sql.ResultSet;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.apache.log4j.Logger;

import ioclcommonproj.com.iocl.utils.JSONArray;
import ioclcommonproj.com.iocl.utils.JSONObject;
//import org.hibernate.validator.constraints.Email;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 10 11:32:13 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XtraRCustomerDetailsVOImpl extends ViewObjectImpl {
    
    private static Logger log ;
    /**
     * This is the default constructor (do not remove).
     */
    public XtraRCustomerDetailsVOImpl() {
        String logFlag = EPICIOCLResourceModel.findKeyValue("LOGS_PRINT_FLAG");
        if (logFlag != null && "Y".equalsIgnoreCase(logFlag)) {

            log = Logger.getLogger(XtraRCustomerDetailsVOImpl.class);

        } else {
            log = Logger.getLogger(XtraRCustomerDetailsVOImpl.class);
            Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
        }
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    /**
     * createXRCustomerDetailsList
     * @param xrInputJson
     */
    public void createXRCustomerDetailsList(JSONObject xrInputJson) {
        this.executeEmptyRowSet();
        try{
            log.info("return input json obj is:::" + xrInputJson);
            Row row1 = null;
            JSONArray  arrObj = xrInputJson.getJSONArray("ResponseData");
            for (int i = 1; i <= arrObj.length(); i++) {
                int k=i-1;
                JSONObject jsonObjectXRDet = arrObj.getJSONObject(k);
                row1 = this.createRow();
                row1.setAttribute(EPICConstant.MOBILE_NO,  String.valueOf(xrInputJson.get(EPICConstant.MOBILE_NO)));
                row1.setAttribute("CardNumber",  String.valueOf(xrInputJson.get("CardNumber")));
                row1.setAttribute("ResponseDateTime",  String.valueOf(xrInputJson.get("ResponseDateTime")));
                row1.setAttribute(EPICConstant.FIRST_NAME,  String.valueOf(jsonObjectXRDet.get(EPICConstant.FIRST_NAME)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.FIRST_NAME)));
                row1.setAttribute(EPICConstant.MIDDLE_NAME,  String.valueOf(jsonObjectXRDet.get(EPICConstant.MIDDLE_NAME)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.MIDDLE_NAME)));
                row1.setAttribute(EPICConstant.LAST_NAME,  String.valueOf(jsonObjectXRDet.get(EPICConstant.LAST_NAME)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.LAST_NAME)));
                row1.setAttribute("MotherMaidenname",  String.valueOf(jsonObjectXRDet.get("MotherMaidenName")).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get("MotherMaidenName")));
                row1.setAttribute("AadharNo",  String.valueOf(jsonObjectXRDet.get("FirstName")).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get("FirstName")));
                row1.setAttribute(EPICConstant.ADDRESS1,  String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS1)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS1)));
                row1.setAttribute(EPICConstant.ADDRESS2,  String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS2)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS2)));
                row1.setAttribute(EPICConstant.ADDRESS3,  String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS3)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS3)));
                row1.setAttribute(EPICConstant.ADDRESS4,  String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS4)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.ADDRESS4)));
                row1.setAttribute(EPICConstant.ANNUAL_INCOME,  String.valueOf(jsonObjectXRDet.get(EPICConstant.ANNUAL_INCOME)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.ANNUAL_INCOME)));
                row1.setAttribute("Cityname",  String.valueOf(jsonObjectXRDet.get("City")).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get("City")));
                row1.setAttribute(EPICConstant.DISTRICT_NAME,  String.valueOf(jsonObjectXRDet.get(EPICConstant.DISTRICT_NAME)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.DISTRICT_NAME)));
                row1.setAttribute(EPICConstant.EMAIL,  String.valueOf(jsonObjectXRDet.get(EPICConstant.EMAIL)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.EMAIL)));
                row1.setAttribute("DOB",  String.valueOf(jsonObjectXRDet.get("DateofBirth")).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get("DateofBirth")));
                row1.setAttribute("OfficePhn",  String.valueOf(jsonObjectXRDet.get("OfficePhone")).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get("OfficePhone")));
                row1.setAttribute(EPICConstant.RESIDENCE_PHONE,  String.valueOf(jsonObjectXRDet.get(EPICConstant.RESIDENCE_PHONE)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.RESIDENCE_PHONE)));
                row1.setAttribute(EPICConstant.STATE_NAME,  String.valueOf(jsonObjectXRDet.get(EPICConstant.STATE_NAME)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.STATE_NAME)));
                row1.setAttribute(EPICConstant.PINCODE,  String.valueOf(jsonObjectXRDet.get(EPICConstant.PINCODE)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.PINCODE)));
                row1.setAttribute(EPICConstant.GENDER,  String.valueOf(jsonObjectXRDet.get(EPICConstant.GENDER)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.GENDER)));    
                row1.setAttribute(EPICConstant.TITLE,  String.valueOf(jsonObjectXRDet.get(EPICConstant.TITLE)).equalsIgnoreCase("null")
                                                  ?"":String.valueOf(jsonObjectXRDet.get(EPICConstant.TITLE)));
                this.insertRow(row1);
            }
        }catch(Exception exc){
            log.info("error in createXRCustomerDetailsList");
            exc.printStackTrace();
        }
    }
    
    /**
     * getXRCustomerBalance
     * @param xrInputJson
     */
    public void getXRCustomerBalance(JSONObject xrInputBCheckJson) {
        this.executeEmptyRowSet();
        try{
            log.info("return input json obj for balance pts is:::" + xrInputBCheckJson);
            Row row1 = null;
            JSONArray  arrObj = xrInputBCheckJson.getJSONArray("ResponseData");
            for (int i = 1; i <= arrObj.length(); i++) {
                int k=i-1;
                JSONObject jsonObjectXRBCheckDet = arrObj.getJSONObject(k);
                row1 = this.createRow();
                row1.setAttribute(EPICConstant.BALANCE_POINTS,  String.valueOf(jsonObjectXRBCheckDet.get(EPICConstant.BALANCE_POINTS)).equalsIgnoreCase("null")
                                                    ?"0":String.valueOf(jsonObjectXRBCheckDet.get(EPICConstant.BALANCE_POINTS)));
                this.insertRow(row1);
                
            }
        }
        catch(Exception exc){
                    log.info("error in getXRCustomerBalance");
                    exc.printStackTrace();
                }
    }
}

