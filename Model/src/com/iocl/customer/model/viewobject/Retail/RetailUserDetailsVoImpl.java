package com.iocl.customer.model.viewobject.Retail;

import com.iocl.customer.model.utils.EPICConstant;
import com.iocl.customer.model.utils.EPICIOCLResourceModel;
import com.iocl.customer.model.utils.ModelUtils;

import com.iocl.customer.model.viewobject.Loyalty.ProfileEnrichmentVoImpl;

import ioclcommonproj.com.iocl.utils.JSONObject;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.log4j.Logger;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 15 15:20:41 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RetailUserDetailsVoImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public RetailUserDetailsVoImpl() {
        String logFlag = EPICIOCLResourceModel.findKeyValue("LOGS_PRINT_FLAG");
        if (logFlag != null && "Y".equalsIgnoreCase(logFlag)) {

            log = Logger.getLogger(RetailUserDetailsVoImpl.class);

        } else {
            log = Logger.getLogger(RetailUserDetailsVoImpl.class);
            Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
        }
    }
    private static Logger log ;
    public void populateDuplicateRecord(String jsonString)
    {
        log.info("Inside populateDuplicateRecord Start");
        this.executeEmptyRowSet();
        JSONObject jsonResponse = null;
        if (jsonString != null) {
            jsonResponse = new JSONObject(jsonString);
        }

        if (jsonResponse != null) {
            Row row = this.createRow();
            String Name = (jsonResponse.isNull(EPICConstant.FIRST_NAME) ? "" :(jsonResponse.getString(EPICConstant.FIRST_NAME)+" ")) +(jsonResponse.isNull("MiddleName") ? "" :(jsonResponse.getString("MiddleName")+" "))+(jsonResponse.isNull("LastName") ? "" :jsonResponse.getString("LastName"));
            log.info("Final Name is "+Name);
            row.setAttribute("Name", String.valueOf(Name));
            row.setAttribute("MobileNo",jsonResponse.isNull(EPICConstant.MOBILE_NUMBER)? "" : String.valueOf(jsonResponse.get(EPICConstant.MOBILE_NUMBER)));
            String address =  null;
            JSONObject addressObj = jsonResponse.isNull("AddressDetails") ? null : jsonResponse.getJSONObject("AddressDetails"); 
            if (addressObj != null) {
                address = (addressObj.isNull("Address1") ? "" :(addressObj.getString("Address1")+" "))
                          +(addressObj.isNull("Address2") ? "" :(addressObj.getString("Address2")+" "))
                          +(addressObj.isNull(EPICConstant.CITY)? "" : String.valueOf(addressObj.get(EPICConstant.CITY))+" ")
                          +(addressObj.isNull(EPICConstant.PINCODE)? "" : String.valueOf(addressObj.get(EPICConstant.PINCODE))+" ");
                log.info("Final Address is "+address);
                row.setAttribute(EPICConstant.ADDRESS,address);
                row.setAttribute("DupUCMId",jsonResponse.isNull("UCMId")? "" : String.valueOf(jsonResponse.get("UCMId")));
            }

            this.insertRow(row);
        }
        log.info("Inside populateDuplicateRecord End");
    }
}

