package com.iocl.customer.model.viewobject;

import java.sql.ResultSet;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.time.Month;

import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.apache.log4j.Logger;

import ioclcommonproj.com.iocl.utils.JSONArray;
import ioclcommonproj.com.iocl.utils.JSONObject;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 11 17:05:00 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReportsChartVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public ReportsChartVOImpl() {
        /**
         * This is the default constructor (do not remove).
         */
    }
    
    private static Logger log = Logger.getLogger(ReportsChartVOImpl.class);

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    public void createReportDataList(List reportLists) {
        this.executeEmptyRowSet();
        try{
            DateFormat formatter = new SimpleDateFormat("MM/dd/YYYY");
            Calendar cal = Calendar.getInstance(); //Get current date/month
            cal.add(Calendar.MONTH, -11); //Go to date, 12 months ago
            cal.set(Calendar.DAY_OF_MONTH, 1);
            java.util.Date date = cal.getTime();
            String startDt = formatter.format(date);
            log.info("***********start date"+startDt);
            
            JSONObject jsonObjectReportLists = new JSONObject(reportLists.get(1).toString());
            Row row1 = null;
            log.info("return json obj is:::" + reportLists.get(1)+" with start month as::"+startDt);
            String startMonth="";
            startMonth=startDt.split("/")[0];
            Integer startMonInt=Integer.parseInt(startMonth);
            log.info("start month num::"+startMonth);
            Map<String, Integer> monthMap = new LinkedHashMap<String, Integer>(); 
            // Initializing map for 12 months
            for(int i=0;i<12;i++){    
                if(startMonInt+i<=12){  
                         monthMap.put(Month.of(startMonInt+i).name(), 0);   
                }else{
                      for(int k=1;k<startMonInt;k++){   
                         monthMap.put(Month.of(k).name(), 0);  
                      }
                      break;
               }
            }
            log.info("MAP size:::"+monthMap.size());
            
            //Getting value from Json response    
            JSONArray  arrObj = jsonObjectReportLists.getJSONArray("OrderDetails");
            for (int i = 1; i <= arrObj.length(); i++) {
                int k=i-1;
                JSONObject jsonObjectREP = arrObj.getJSONObject(k);
                String[] dt=jsonObjectREP.getString("BookingDate").split("/");
                  for (Map.Entry<String, Integer> monEntry : monthMap.entrySet()){
                         int cnt=Integer.parseInt(String.valueOf(monEntry.getValue()));
                         if(Month.of(Integer.parseInt(dt[0])).name()
                                    .equalsIgnoreCase(String.valueOf(monEntry.getKey()))){
                             monthMap.put(Month.of(Integer.parseInt(dt[0])).name(), cnt+1);    
                         }  
                          
                     } 

              }
            
            //PUTTING COUNTS in VO

            for (Map.Entry<String, Integer> monthItrPutEntry : monthMap.entrySet()){
                   row1 = this.createRow();
                   log.info("Key = " + monthItrPutEntry.getKey() +  
                                                ", Value = " + monthItrPutEntry.getValue()); 
                   row1.setAttribute("MonthVal",  String.valueOf(monthItrPutEntry.getKey()));
                   row1.setAttribute("BookingCount",String.valueOf(monthItrPutEntry.getValue()));
                   row1.setAttribute("CountVal",Integer.parseInt(String.valueOf(monthItrPutEntry.getValue())));
                   this.insertRow(row1);
               } 
        }
         catch (Exception exc) {
                         log.error("exception:",exc);
                     }
     }
}

