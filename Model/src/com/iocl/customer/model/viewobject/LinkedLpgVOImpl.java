package com.iocl.customer.model.viewobject;

import com.iocl.customer.model.utils.EPICConstant;

import com.iocl.customer.model.utils.EPICIOCLResourceModel;

import java.util.ArrayList;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.log4j.Logger;

import ioclcommonproj.com.iocl.utils.JSONArray;
import ioclcommonproj.com.iocl.utils.JSONObject;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 01 18:00:49 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LinkedLpgVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    private static Logger logger = Logger.getLogger(LinkedLpgVOImpl.class);
    public LinkedLpgVOImpl() {
        String logFlag = EPICIOCLResourceModel.findKeyValue("LOGS_PRINT_FLAG");
        if (logFlag != null && "Y".equalsIgnoreCase(logFlag)) {

            logger = Logger.getLogger(LinkedLpgVOImpl.class);

        } else {
            logger = Logger.getLogger(LinkedLpgVOImpl.class);
            Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);
        }
    }
    
    public void populateLinkedDetails(String jsonInpString) {
        java.util.Map sessionparam = ADFContext.getCurrent().getSessionScope();
        java.util.Map param = ADFContext.getCurrent().getPageFlowScope();
        JSONObject jsonResponse = new JSONObject(jsonInpString);
        logger.info("Response"+jsonResponse);
        Row row = this.createRow();
        row.setAttribute(EPICConstant.RELATIONSHIP_UCMID,jsonResponse.isNull(EPICConstant.RELATIONSHIP_UCMID)?"":jsonResponse.getString(EPICConstant.RELATIONSHIP_UCMID));
        row.setAttribute("Name",jsonResponse.isNull("Name")?"":jsonResponse.getString("Name"));
        row.setAttribute("DistributorName", jsonResponse.isNull("DistributorName")?"":jsonResponse.getString("DistributorName"));
        
        
        JSONArray listofMobileArr =jsonResponse.isNull("ListOfPhone") ? null : jsonResponse.getJSONArray("ListOfPhone");
        if (listofMobileArr != null) {
            ArrayList<String> list = new ArrayList<String>();
            ArrayList<String> masklist = new ArrayList<String>();
            for (int i =0; i<listofMobileArr.length(); i++) {
                JSONObject objOD = listofMobileArr.getJSONObject(i);
                list.add(objOD.get(EPICConstant.MOBILE_NUMBER).toString());
                masklist.add(maskedGenericNumber(String.valueOf(objOD.get(EPICConstant.MOBILE_NUMBER))));
            }
            logger.info("After List"+list);
            String mobNumber = list.toString().replace("[", "").replace("]", "");
            String maskmb=masklist.toString().replace("[", "").replace("]", "");
            param.put("maskedMobileNumber", maskmb);
            logger.info("-----"+mobNumber);
            row.setAttribute(EPICConstant.MOBILE_NUMBER, mobNumber);
        }
        
        
           
        
            
            
            
       
        
        
       
        
        JSONArray listofEmailArr =jsonResponse.isNull("ListOfEmail") ? null : jsonResponse.getJSONArray("ListOfEmail");
        if (listofEmailArr != null) {
            ArrayList<String> emaillist = new ArrayList<String>();
            for (int j =0; j<listofEmailArr.length(); j++) {
                JSONObject emailobjOD = listofEmailArr.getJSONObject(j);
                emaillist.add(emailobjOD.get("EmailAddress").toString());
            }
            logger.info("After List"+emaillist);
            String emailAddress = emaillist.toString().replace("[", "").replace("]", "");
            logger.info("-----"+emailAddress);
            row.setAttribute("EmailId", emailAddress);
        }
        
        
        
        
        
        
       
        row.setAttribute("Address", jsonResponse.isNull("Address")?"":jsonResponse.getString("Address"));
        
        row.setAttribute("UCMId", jsonResponse.isNull("UCMId")?"":jsonResponse.getString("UCMId"));
        sessionparam.put("sessionUCMID", jsonResponse.isNull("UCMId")?"":jsonResponse.getString("UCMId"));
        logger.info("After Deployment");
        row.setAttribute("CunsumerId", jsonResponse.isNull(EPICConstant.RELATIONSHIP_UCMID)?"":jsonResponse.getString(EPICConstant.RELATIONSHIP_UCMID));
        this.insertRow(row);
                
        
//        JSONArray arrObj =jsonResponse.getJSONArray("ConsumerDetails");
//        this.getViewObject().executeEmptyRowSet();
//
//        for (int i = 0; i < arrObj.length(); i++) {
//            JSONObject objOD = arrObj.getJSONObject(i);
//            Row row = this.createRow();
//            row.setAttribute("ConsumerNo",objOD.getString("ConsumerNo"));
//            row.setAttribute("ReferenceNo", objOD.getString("ReferenceNo"));           
//          
//            row.setAttribute("Status", objOD.getString("Status"));
//            this.insertRow(row);
//        }
    }
    
    public static String maskedGenericNumber(String genericNumber){
        
         StringBuilder masked = new StringBuilder();
         int maskDigits=genericNumber.length()-com.iocl.customer.model.utils.EPICConstant.NON_MASKED_MOBILECHAR;
         for (int i = 0; i < genericNumber.length(); i++) {
             char c = genericNumber.charAt(i);
             logger.info("character at i: "+i+" is :" + c);
             if(i<maskDigits){
                 masked.append(com.iocl.customer.model.utils.EPICConstant.MASKEDCHAR);
             }else{
                 masked.append(c);
             }
         }
         logger.info("Final String is :" + masked.toString());
         return masked.toString();
        
    }
    
}

