package com.iocl.customer.model.viewobject;

import java.io.IOException;

import java.sql.ResultSet;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.apache.commons.io.IOUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 19 15:27:58 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LpgSvcCacheViewImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LpgSvcCacheViewImpl() {
    }

    /**
     * executeQueryForCollection - for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    public void storeCache(String userId, String websvcKey,String request,String response) {

        System.out.println("Storingg..............");
        userId="1";//to be change
        try {          
            Row row = this.createRow();
            row.setAttribute("UserId", userId);
            row.setAttribute("WebServiceId", websvcKey);
            row.setAttribute("SvcRequest", new BlobDomain(request.getBytes()));
            row.setAttribute("SvcResponse", new BlobDomain(response.getBytes()));
            this.insertRow(row);
        this.getApplicationModule().getTransaction().commit();
        } catch (Exception e) {
            this.getApplicationModule().getTransaction().rollback();
            throw e;
        }
    }
    
    
    
    public String fetchResponse(String userId, String websvcKey) {

        System.out.println("fetcheing..............");
        String response=null;
        BlobDomain bobResponse=new BlobDomain();
        userId="1";//to be change
        try {          
            
            if(this.getRowCount()>0)
                {
                    RowSetIterator iter = this.createRowSetIterator(null);
                    while(iter.hasNext())
                    {
                    Row row=iter.next();
                   
                        
                   String userID=row.getAttribute("UserId").toString();
                    String webSvcId=row.getAttribute("WebServiceId").toString();
                        if(userID.equalsIgnoreCase(userId) && webSvcId.equalsIgnoreCase(websvcKey))
                        bobResponse=(BlobDomain)row.getAttribute("SvcResponse");
                        response= IOUtils.toString(bobResponse.getInputStream());
                        
                    break;
                    }
                    this.closeRowSetIterator();
                }
            
            

        } catch (Exception e) {
            try {
                throw e;
            } catch (IOException f) {
            }
        }
        return response;
    }
}

