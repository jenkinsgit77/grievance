package com.iocl.customer.model.service;

import com.iocl.customer.model.service.common.AppModule;
import com.iocl.customer.model.utils.EPICConstant;
import com.iocl.customer.model.utils.EPICIOCLResourceModel;
import com.iocl.customer.model.utils.ModelUtils;
import com.iocl.customer.model.viewobject.AOLocatorVOImpl;
import com.iocl.customer.model.viewobject.AutolpgDistMasterVoImpl;
import com.iocl.customer.model.viewobject.DealerFeedbackVOImpl;
import com.iocl.customer.model.viewobject.ERRORHANDLERVOImpl;
import com.iocl.customer.model.viewobject.GrievFormImpl;
import com.iocl.customer.model.viewobject.GrievSubCatVOImpl;
import com.iocl.customer.model.viewobject.LPGAreaOfficeMasterVOImpl;
import com.iocl.customer.model.viewobject.LPGAreaOfficeVOImpl;
import com.iocl.customer.model.viewobject.LinkedLpgVOImpl;
import com.iocl.customer.model.viewobject.Loyalty.EnrollmentDbVoImpl;
import com.iocl.customer.model.viewobject.Loyalty.ProfileEnrichmentVoImpl;
import com.iocl.customer.model.viewobject.Loyalty.XtraRCustVehicleDetailsVOImpl;
import com.iocl.customer.model.viewobject.Loyalty.XtraRCustomerDetailsVOImpl;
import com.iocl.customer.model.viewobject.Loyalty.XtraRewardsTxnVOImpl;
import com.iocl.customer.model.viewobject.LpgDistMasterImpl;
import com.iocl.customer.model.viewobject.LpgSvcCacheViewImpl;
import com.iocl.customer.model.viewobject.NetworkLocatorVoImpl;
import com.iocl.customer.model.viewobject.PartnerLocatorVOImpl;
import com.iocl.customer.model.viewobject.ROLocatorVOImpl;
import com.iocl.customer.model.viewobject.ReportsChartVOImpl;
import com.iocl.customer.model.viewobject.Retail.RetailOnboardingVOImpl;
import com.iocl.customer.model.viewobject.Retail.RetailUserDetailsVoImpl;
import com.iocl.customer.model.viewobject.ioclcommonconfig.IoclCommonConfigVOImpl;
import com.iocl.customer.model.viewobject.logssave.ServiceLogsSaveVOImpl;
import com.iocl.customer.model.viewobject.lpgerrorstrial.LpgErrorsTrailEOViewImpl;

import com.iocl.customer.model.viewobject.servo.SearchStockistEVOImpl;

import ioclcommonproj.com.iocl.beans.ServiceParam;
import ioclcommonproj.com.iocl.utils.JSONArray;
import ioclcommonproj.com.iocl.utils.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.net.MalformedURLException;
import java.net.SocketTimeoutException;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.faces.context.FacesContext;

import oracle.dss.util.BASE64Encoder;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.log4j.Logger;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 16 17:51:10 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }
    private static Logger log = Logger.getLogger(AppModuleImpl.class);

    /**
     * Container's getter for AppListVo1.
     * @return AppListVo1
     */
    public ViewObjectImpl getAppListVo1() {
        return (ViewObjectImpl) findViewObject("AppListVo1");
    }

    public void fetchApplist(String flowCode) {

        //        log.info("inside fetchApplist");
        ViewObjectImpl vo = this.getAppListVo1();
        vo.setNamedWhereClauseParam("FlowCodeBindVar", flowCode);
        Long ctt = vo.getEstimatedRowCount();
    }

    public void fetchAppListLpgLogIn() {
        ViewObjectImpl vo = this.getAppListVo1();
        String whereClauseString = "FLOW_CODE='CustomerUnsecured'";
        vo.setWhereClause(whereClauseString);
        vo.executeQuery();
    }
    
    public void fetchAppListCustomerNonLogin(String pflowCode) {
        if(pflowCode!=null){
        if(pflowCode.toString().equalsIgnoreCase("CustUnsecureIndane")){            
        ViewObjectImpl vo = this.getAppListVo2_Customer();
        String whereClauseString="FLOW_CODE="+"'"+pflowCode+"'";
        vo.setWhereClause(whereClauseString);
        Long ctt = vo.getEstimatedRowCount();
        log.info(" fetchAppListCustomerNonLogin Count: " + ctt);
        vo.executeQuery();
        }
        if(pflowCode.toString().equalsIgnoreCase("CustUnsecureRetail")){
        ViewObjectImpl vo = this.getAppListVo2_Retail();
        String whereClauseString="FLOW_CODE="+"'"+pflowCode+"'";
        vo.setWhereClause(whereClauseString);
        Long ctt = vo.getEstimatedRowCount();
        log.info(" fetchAppListCustomerNonLogin Count: " + ctt);
        vo.executeQuery();
        }
        }
    }
    
   

    public void fetchApplistpartner(String flowCode) {

        ViewObjectImpl vo = this.getAppListVo2_Partner();
        vo.setNamedWhereClauseParam("FlowCodeBindVar", flowCode);
    }

    public List serviceCustomerCall(List inputList, String method) {
        log.info("INSIDE LPG SERVICE CALL");
        List retValue = new ArrayList();
        JSONObject jsonObject = null;
        retValue.add(0, "false");
        String str = null;
        log.info("Inside serviceLPGCall method");
        log.info("inputList: " + inputList);
        log.info("method: " + method);
        JSONObject jsonInput = new JSONObject();
        try {
            switch (method) {
            case EPICConstant.DEGREE_OVERVIEW:
                str =
                    callServicePost(inputList.get(0).toString(), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                }
                log.info("json Response is: " + jsonObject);
                break;

            case EPICConstant.FETCH_CONSUMER_PROFILE_DETAILS:
                log.info("json Input for FETCH_CONSUMER_PROFILE_DETAILS is:" + inputList.get(1));
                str =
                    callServicePost((String) inputList.get(0).toString(), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,inputList.get(2).toString());
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, str);

                } else {
                    retValue.set(0, "false");
                    retValue.add(1, str);
                }
                break;
            case EPICConstant.FETCHCURRENTDEBITBALANCE:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                }
                log.info("json Response is for FETCHCURRENTDEBITBALANCE: " + jsonObject);
                break;
            case EPICConstant.SUBSCRIPTION_VOUCHER_REQUEST:
                str =
                    callServicePost(inputList.get(0).toString(), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    populateLPGProducts(str);
                    retValue.set(0, "true");
                    retValue.add(1, str);
                } else {
                    retValue.set(0, "false");
                }
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.SUBSCRIPTION_VOUCHER_ORDER:
                str =
                    callServicePost(inputList.get(0).toString(), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, str);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, str);
                }
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.GETSR:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                }
                break;
            case EPICConstant.GET_SR_LIST:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            case EPICConstant.SENDOTP:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.VALIDATEOTP:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.REACTIVATE_LPG_CONNECTION:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            case EPICConstant.GET_CUSTOMER_DETAILS:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    this.getLinkedLpgVO1().populateLinkedDetails(jsonObject.toString());
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                
                
                
               
               
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.GENERATE_EMAILOTP:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.VALIDATE_EMAILOTP:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.IDAM_CONTACT:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.DBTL_SERVICE:
                str =
                    callServicePost(inputList.get(0).toString(), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null && jsonObject.getString("ErrorCode").equalsIgnoreCase(EPICConstant.SUCCES_CASE_DBTL)) { //EPICConstant.SUCCES_CASE_DBTL  for DBTL
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                }
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.LINK_CONS_DETLS:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                log.info("json Response is: " + jsonObject);
                break;
            case EPICConstant.COEXISTENCE:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
                break;
            case EPICConstant.NEW_CONNECTION_STATUS:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            case EPICConstant.NEW_CONNECTION_CANCEL_REQUEST:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
                case EPICConstant.GET_PROMOTIONS:
                    str =
                        callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                        EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
                case EPICConstant.BOOKREFILLPRICELIST:
                    str =
                        callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                        EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
                case EPICConstant.GENERATE_REPORTCHART:
                    str =
                        callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                        EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                        retValue.add(2, String.valueOf(inputList.get(2)));
                        this.getReportsChartVO2().createReportDataList(retValue);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
                case EPICConstant.RO_LOCATOR:
                str =
                    callServicePost((String) inputList.get(0),(JSONObject)(inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        
                            retValue.set(0, "true");
                            retValue.add(1, jsonObject);
//                        retValue.add(2, String.valueOf(inputList.get(2)));
                        if (!new JSONObject(str).isNull("VwMobRoinfoCollection")) {
                            this.getROLocatorVO1().populateROData(new JSONObject(str).toString());
                        }
                        }else{
                            retValue.set(0, "false");
                            retValue.add(1, jsonObject);
                        }
                    break;
            
                case EPICConstant.AO_LOCATOR:
                str =
                    callServicePost((String) inputList.get(0),(JSONObject)(inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                //                        retValue.add(2, String.valueOf(inputList.get(2)));
                        if (!new JSONObject(str).isNull("AreaOfficeList")) {
                            this.getAOLocatorVO1().populateAOData(new JSONObject(str).toString());
                        }
                    }else{
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
                case EPICConstant.PARTNER_LOCATOR:
                str =
                    callServicePost((String) inputList.get(0),(JSONObject)(inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {                        
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                        JSONObject jsonResponse=jsonObject.getJSONObject("MapObject");
                        
//                        retValue.add(2, String.valueOf(inputList.get(2)));
                        if (!new JSONObject(str).isNull("MapObject")) {
                            if (jsonResponse.has("VwMobLPGInfo")) {
                                this.getPartnerLocatorVO1().populatePartnerDistributor(new JSONObject(str).toString());
                            }
                            if (jsonResponse.has("VwMobLUBESInfo")) {
                                    this.getPartnerLocatorVO1().populatePartnerStockist(new JSONObject(str).toString());
                            }                            
                        }
                        
                    }else{
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
                case EPICConstant.XR_CUSTOMER_DETAILS:
                str =
                    callServicePost((String) inputList.get(0),(JSONObject)(inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
//                    if (jsonObject.get("ResponseDescription") != null &&
//                        jsonObject.getString("ResponseDescription").equalsIgnoreCase("Success")) {
                        
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                        this.getXtraRCustomerDetailsVO1().createXRCustomerDetailsList(jsonObject);                       
                    }else{
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
            case EPICConstant.XR_CUSTOMER_TRANSACTION:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                
                this.getXtraRewardsTxnVO1().executeEmptyRowSet(); //resetting Vo
                this.getXtraRewardsTxnVO2().executeEmptyRowSet(); //resetting Vo
                
                if ((!jsonObject.isNull("ErrorCode") && jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) ||
                    (!jsonObject.isNull("ErrorMessage") &&
                     jsonObject.getString("ErrorMessage").equalsIgnoreCase("Data Not found"))) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);

                    populateXRTransaction(jsonObject); // Method to populate XR Records
//                    if (String.valueOf(inputList.get(2)).equalsIgnoreCase("TXN")) {
//                        this.getXtraRewardsTxnVO1().getXRCustomerTxns(jsonObject, (String) inputList.get(2));
//                    } else {
//                        this.getXtraRewardsTxnVO2().getXRCustomerTxns(jsonObject, (String) inputList.get(2));
//                    }
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            case EPICConstant.XR_CUSTOMER_BALANCE:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    //                                    if (jsonObject.get("ResponseDescription") != null &&
                    //                                        jsonObject.getString("ResponseDescription").equalsIgnoreCase("Success")) {

                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                    this.getXtraRCustomerDetailsVO2().getXRCustomerBalance(jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            case EPICConstant.FETCH_DEALER_DETAILS:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            case EPICConstant.SUBMIT_DEALER_FEEDBACK:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
            
                case EPICConstant.LEAD_CREATION:
                    str =
                        callServicePost((String) inputList.get(0), (JSONObject) inputList.get(1),
                                        EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                    
            break;
                case EPICConstant.UPDATE_LINKING:
                    str =
                        callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                        EPICConstant.NON_SECURED_TOKEN,null);
                    jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
            case EPICConstant.FETCH_XR_RECORD:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN, null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                    if (jsonObject.get("DuplicateFound") != null &&
                        jsonObject.getString("DuplicateFound").equalsIgnoreCase("Y")) {
                        this.getProfileEnrichmentVo1().populateExistingRecord(jsonObject.toString());
                    }
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
                case EPICConstant.PROFILE_ENRICHMENT:
                String retString;
                jsonInput = (JSONObject) (inputList.get(1));
                
                if (!jsonInput.isNull("EnrichmentFlag") && jsonInput.getString("EnrichmentFlag").equalsIgnoreCase("Y")) {
                    retString = this.getEnrollmentDbVo1().setProfileEnrichment(String.valueOf(inputList.get(1)));
                    jsonInput = new JSONObject(retString);
                }
                str = callServicePost((String) inputList.get(0),jsonInput,EPICConstant.NON_SECURED_TOKEN, null);
                jsonObject = new JSONObject(str);
                
                
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                    break;
                case EPICConstant.XR_LINKING:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                
                
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
            case EPICConstant.PROFILE_ENROLLMENT:
                String retStringProfile;
                jsonInput = (JSONObject) (inputList.get(1));
                
                if (!jsonInput.isNull("DataDuplicationCase") && jsonInput.get("DataDuplicationCase").equals("Y")) {

                } else {
                    retStringProfile =
                        this.getEnrollmentDbVo1().setProfileEnrichment(String.valueOf(inputList.get(1)));
                    jsonInput = new JSONObject(retStringProfile);
                }
                str = callServicePost((String) inputList.get(0), jsonInput, EPICConstant.NON_SECURED_TOKEN, null);
                jsonObject = new JSONObject(str);

                if ((jsonObject.getString("ErrorCode") != null &&
                     jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) &&
                    (!jsonObject.isNull("ErrorSubCode") &&
                     jsonObject.getString("ErrorSubCode").equalsIgnoreCase("0"))) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                    retValue.add(2, jsonInput); // Storing Updated jsonInput. To be used in Duplication Key
                        if (!jsonObject.isNull("ErrorSubCode") &&
                        (jsonObject.get("ErrorSubCode").equals("402") ||
                         jsonObject.get("ErrorSubCode").equals("403"))) {
                        this.getProfileEnrichmentVo1().populateDuplicateRecord(jsonObject.toString());
                    }
                }
                break;
                case EPICConstant.ONBOARD_CUSTOMER_RETAIL:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    if ((jsonObject.getString("ErrorCode") != null &&
                         jsonObject.getString("ErrorCode").equalsIgnoreCase("100")) &&
                        (!jsonObject.isNull("UCMId") && jsonObject.get("UCMId") != "")) {
                        log.info("Retail User Duplicate Data Found");
                        this.getRetailUserDetailsVo1().populateDuplicateRecord(jsonObject.toString());
                    }
                    }
                break;
                case EPICConstant.VEHICLE_LOVS:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                    if (jsonObject.getString("ErrorCode") != null &&
                        jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                        retValue.set(0, "true");
                        retValue.add(1, jsonObject);
                    } else {
                        retValue.set(0, "false");
                        retValue.add(1, jsonObject);
                    }
                break;
                case EPICConstant.LOYALTY_STATE_DISTRICT:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN, null);
                jsonObject = new JSONObject(str);
                if ((jsonObject.getString("ErrorCode") != null &&
                     jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) &&
                    (jsonObject.getString("ErrorSubCode") != null &&
                     jsonObject.getString("ErrorSubCode").equalsIgnoreCase("0"))) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
                case EPICConstant.PROFILE_ENROLLMENT_DUPLICATE:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN, null);
                jsonObject = new JSONObject(str);
                if ((jsonObject.getString("ErrorCode") != null &&
                     jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) &&
                    (jsonObject.getString("ErrorSubCode") != null &&
                     jsonObject.getString("ErrorSubCode").equalsIgnoreCase("403"))) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
                }
                break;
                case EPICConstant.SEARCH_STOCKIST:
                str =
                    callServicePost((String) inputList.get(0), (JSONObject) (inputList.get(1)),
                                    EPICConstant.NON_SECURED_TOKEN,null);
                jsonObject = new JSONObject(str);
                if (jsonObject.getString("ErrorCode") != null &&
                    jsonObject.getString("ErrorCode").equalsIgnoreCase("0")) {
                    retValue.set(0, "true");
                    retValue.add(1, jsonObject);
                    this.getSearchStockistEVO1().setTransactions(jsonObject);
                } else {
                    retValue.set(0, "false");
                    retValue.add(1, jsonObject);
//                    this.getSearchStockistEVO1().setTransactions(jsonObject);
                }
                break;
            
            default:
                break;
            }
        } catch (Exception e) {
            retValue.set(0, "false");

            try {
                throw e;
            } catch (Exception f) {
                f.printStackTrace();
            }

        }
        return retValue;
    }


    private String callServicePost(String url, JSONObject inputJason, int securedToken,String headerattr) throws Exception {
        //        log.info("URl= " + url);
        log.info("Inside callServicePost Start");

        Map<String, Object> mapSession = FacesContext.getCurrentInstance()
                                                     .getExternalContext()
                                                     .getSessionMap();
        
        if(mapSession.get("SESSION_PORTAP_IOCL_CONFIG")==null) {
            fetchAssignPropMap();   
        }
        
        
        ioclcommonproj.com.iocl.beans.UserProfileBean userprofileBn =(ioclcommonproj.com.iocl.beans.UserProfileBean)(mapSession.get("userDetails"));
        
        
        log.info("UserProfileBean Bean Object is made. Values from it");
        log.info("userprofileBn Object "+userprofileBn);
        if (userprofileBn != null) {
            log.info(EPICConstant.UCMID + " " + userprofileBn.getUcmID());
            log.info(EPICConstant.CONSUMERID + " " + userprofileBn.getConsumerId());
            log.info(EPICConstant.PARTNERCODE + " " + userprofileBn.getPartnercode());
            log.info(EPICConstant.RELATIONSHIPUCMID + " " + userprofileBn.getSelectedRelationshipUCMId());
        }
        log.info("--------------------------End Here-----------------------------");  
        
        String actualToken = null;
        String authStringEnc = null;
        switch (securedToken) {
        case 0:
            String name = EPICIOCLResourceModel.findKeyValue("EPIC_IOCL_SVC_ID");
            String password = EPICIOCLResourceModel.findKeyValue("EPIC_IOCL_SVC_PWD");
            String authString = name + ":" + password;
            authStringEnc = new BASE64Encoder().encode(authString.getBytes());
            authStringEnc = "Basic " + authStringEnc;
            break;
//        case 1:
//            actualToken = callServicePostSecured();
//            authStringEnc = actualToken;
//            break;

        }


        Map<String, String> map = FacesContext.getCurrentInstance()
                                              .getExternalContext()
                                              .getRequestHeaderMap();

        inputJason.put(EPICConstant.TRACKING_ID, ModelUtils.createUniqueID());
        inputJason.put(EPICConstant.SOURCE, EPICConstant.SOURCE_PORTAL);
        if (!inputJason.has(EPICConstant.UCMID)) {
            if (map.get("UCMId") == null) {
                if (userprofileBn != null && userprofileBn.getUcmID() != null)
                    inputJason.put(EPICConstant.UCMID,userprofileBn.getUcmID());
                else
                    inputJason.put(EPICConstant.UCMID, "");
            } else
                inputJason.put(EPICConstant.UCMID, String.valueOf(map.get("UCMId")));

            log.info("UCMID-----------------------------------" +
                     (inputJason.has(EPICConstant.UCMID) ? inputJason.get(EPICConstant.UCMID) : "null"));
        }
        if (!inputJason.has(EPICConstant.CONSUMERID)) {
            if (userprofileBn != null && userprofileBn.getConsumerId() != null)
                inputJason.put(EPICConstant.CONSUMERID,userprofileBn.getConsumerId());
            else
                inputJason.put(EPICConstant.CONSUMERID, "");
            log.info("CONSUMERID-----------------------------------" +
                     (inputJason.has(EPICConstant.CONSUMERID) ? inputJason.get(EPICConstant.CONSUMERID) : "null"));
        }
        if (!inputJason.has(EPICConstant.PARTNERCODE)) {
            if (userprofileBn != null && (userprofileBn.getPartnercode() != null ||(!String.valueOf(userprofileBn.getPartnercode()).trim().equalsIgnoreCase(""))))
                inputJason.put(EPICConstant.PARTNERCODE,userprofileBn.getPartnercode());
            else
                inputJason.put(EPICConstant.PARTNERCODE, "");
            log.info("PARTNERCODE-----------------------------------" +
                     (inputJason.has(EPICConstant.PARTNERCODE) ? inputJason.get(EPICConstant.PARTNERCODE) : "null"));
        }
        if (!inputJason.has(EPICConstant.RELATIONSHIPUCMID)) {
            if (userprofileBn != null && userprofileBn.getSelectedRelationshipUCMId() != null)
                inputJason.put(EPICConstant.RELATIONSHIPUCMID,userprofileBn.getSelectedRelationshipUCMId());
            else
                inputJason.put(EPICConstant.RELATIONSHIPUCMID, "");
            log.info("RELATIONSHIPUCMID-----------------------------------" +
                     (inputJason.has(EPICConstant.RELATIONSHIPUCMID) ? inputJason.get(EPICConstant.RELATIONSHIPUCMID) :
                      "null"));
        }

        /*-------------Below code to be commented before Sever deployment---------*/

        log.info("SET_CUSTOM_ATTRIBUTE Value " + EPICIOCLResourceModel.findKeyValue("SET_CUSTOM_ATTRIBUTE"));
        if (EPICIOCLResourceModel.findKeyValue("SET_CUSTOM_ATTRIBUTE") != null &&
            EPICIOCLResourceModel.findKeyValue("SET_CUSTOM_ATTRIBUTE").equalsIgnoreCase("Y")) {
            if (EPICIOCLResourceModel.findKeyValue("CUSTOM_UCMID") != null) {
                inputJason.put(EPICConstant.UCMID, EPICIOCLResourceModel.findKeyValue("CUSTOM_UCMID"));
            }
            if (EPICIOCLResourceModel.findKeyValue("CUSTOM_CONSUMERID") != null) {
                inputJason.put(EPICConstant.CONSUMERID, EPICIOCLResourceModel.findKeyValue("CUSTOM_CONSUMERID"));
            }
            if (EPICIOCLResourceModel.findKeyValue("CUSTOM_PARTNERCODE") != null) {
                inputJason.put(EPICConstant.PARTNERCODE, EPICIOCLResourceModel.findKeyValue("CUSTOM_PARTNERCODE"));
            }
            if (EPICIOCLResourceModel.findKeyValue("CUSTOM_RELATIONSHIPID") != null) {
                inputJason.put(EPICConstant.RELATIONSHIPUCMID,
                               EPICIOCLResourceModel.findKeyValue("CUSTOM_RELATIONSHIPID"));
            }
        }

        /*---------------------------End Here-----------------------*/

        log.info("Input " + EPICConstant.UCMID + " : " +
                 (inputJason.has(EPICConstant.UCMID) ? inputJason.get(EPICConstant.UCMID) : "null"));

        log.info("Input Parameter: " + inputJason);
        log.info(EPICConstant.USER_TRACKING_ID +" Customer "+ mapSession.get("UserTrackingId"));
        StringEntity input = new StringEntity(inputJason.toString());

        String responseFromDb = null;
        log.info("Data Sent By Service = " + input.toString());
        //                if(EPICConstant.CACHE_SVC_LST.contains(url))
        //                {
        //                responseFromDb= this.getLpgSvcCacheView1().fetchResponse("1",url);
        //
        //                if(responseFromDb!=null)
        //                   return responseFromDb;
        //                }

        String output = null;
        StringBuffer str = new StringBuffer();
        StringBuffer strForTrackingId = new StringBuffer();
        String outputForTrackingId = null;
        //String isAuditTrailEnabled = ModelUtils.findKeyValue("IS_AUDIT_TRAIL_ENABLED");
        log.info("Cust...isSerivcEnabled  before .... ");
        String isSerivcEnabled=checkServiceMap(url,userprofileBn);
        log.info("Cust..isSerivcEnabled ="+isSerivcEnabled);
        
        BufferedReader brInput = null;
        JSONObject jsonObj = null;
        String trackId = null;
        ViewObjectImpl vo = null;
        Row newRow = null;
        boolean rowInserted = false;
        if (isSerivcEnabled!=null && isSerivcEnabled.equalsIgnoreCase("Y")) {
            brInput = new BufferedReader(new InputStreamReader((input.getContent())));
            log.info("Output from Server .... \n");
            try {
                while ((outputForTrackingId = brInput.readLine()) != null) {
                    strForTrackingId.append(outputForTrackingId);
                }
            } finally {
                if(brInput != null) brInput.close();
           }
            jsonObj = new JSONObject(strForTrackingId.toString());
            trackId = (String) jsonObj.get("TrackingId");
            vo = this.getAuditTrailVo1();
            newRow = vo.createRow();
            newRow.setAttribute("TrackingId", trackId);
            newRow.setAttribute("ServiceInput", new BlobDomain((String.valueOf(jsonObj)).getBytes()));
            newRow.setAttribute("ServiceUrl", url);
            /**-----------Setting IdamMobileNo to UserId Field--------------**/
            newRow.setAttribute("UserId", String.valueOf(userprofileBn != null ? userprofileBn.getIdamUserMobileNo() : map.get("Mobile")));
            newRow.setAttribute("UserSessionTrackingId",String.valueOf(mapSession.get("UserTrackingId")));
            log.info("Setting HeaderAttribute");
            newRow.setAttribute("HeaderAttribute",headerattr);
                
            }
        //RestConnManager obj = new RestConnManager();
        HttpClient httpClient = null;
        try {
            System.out.println("CONNECTION_TIMEOUT "+EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT"));
              @SuppressWarnings("deprecation")
                  
            RequestConfig requestConfig = RequestConfig.custom()
            .setConnectTimeout(Integer.parseInt(EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT")))
            .setConnectionRequestTimeout(Integer.parseInt(EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT")))
            .setSocketTimeout(Integer.parseInt(EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT"))).build();
             
             httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).build();


          //  httpClient = (HttpClient) obj.CreateConnection("customerPool");
            log.info("CustomerAppModile=httpClient" + httpClient);

            HttpPost postRequest = new HttpPost(url);
            input.setContentType("application/json");
            postRequest.setEntity(input);
            postRequest.addHeader("accept", "Application/json");
            postRequest.setHeader("Authorization", authStringEnc);
            long start = System.currentTimeMillis();
            log.info("Method execution start time " + start + " milliseconds");
            HttpResponse response = httpClient.execute(postRequest);
            long endTime = System.currentTimeMillis();
            log.info("Method execution end time " + endTime + " milliseconds");
            long elapsedTime = System.currentTimeMillis() - start;
            log.info("Service Response Received in: " + elapsedTime + " milliseconds");
            log.info("Status Code from Service " + response.getStatusLine().getStatusCode());
            log.info(response.getStatusLine().getStatusCode());
            if (response.getStatusLine().getStatusCode() == 500) {
                ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}", EPICConstant.ERROR_HTTP_500);
                if (!rowInserted &&   (isSerivcEnabled!=null && isSerivcEnabled.equalsIgnoreCase("Y"))) {
                    newRow.setAttribute("ServiceOutput", new BlobDomain(("No response from service with Error code = 500").getBytes()));
                    vo.insertRow(newRow);
                    this.getDBTransaction().commit();
                    rowInserted = true;
                }
                throw new RuntimeException("Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
            }


            BufferedReader br = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
            log.info("Output from Server .... \n");
            try {
                while ((output = br.readLine()) != null) {
                    log.info(output);
                    str.append(output);
                }
            } finally {
                if(br != null) br.close();
           }  
            if (!rowInserted && (isSerivcEnabled!=null && isSerivcEnabled.equalsIgnoreCase("Y"))) {
                newRow.setAttribute("ServiceOutput", new BlobDomain((String.valueOf(str)).getBytes()));
                vo.insertRow(newRow);
                this.getDBTransaction().commit();
                rowInserted = true;
            }
            
//            if (EPICConstant.CACHE_SVC_LST.contains(url)){
//                log.info("New Condition Enabled similar to LPG");
//                this.getLpgSvcCacheView1().storeCache("1", url, String.valueOf(jsonObj), str.toString());
//            }
            if(ModelUtils.isJSONValid(str.toString()))
            {
            JSONObject jsonObjectError = new JSONObject(str.toString());
            if (jsonObjectError.has(EPICConstant.ERROR_CODE) &&
                !String.valueOf(jsonObjectError.get(EPICConstant.ERROR_CODE))
                .equalsIgnoreCase(EPICConstant.ZERO_VAL_SUCCES_CASE)) {
                ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}",
                                 String.valueOf(jsonObjectError.get(EPICConstant.ERROR_CODE)));
            }
            
                if(jsonObjectError.has(EPICConstant.ERROR_CODE) && (String.valueOf(jsonObjectError.get(EPICConstant.ERROR_CODE)).equalsIgnoreCase(EPICConstant.SBL1) || String.valueOf(jsonObjectError.get(EPICConstant.ERROR_CODE)).equalsIgnoreCase(EPICConstant.ERROR_500)))
                {
                if(jsonObjectError.has(EPICConstant.ERROR_MESSAGE) && jsonObjectError.get(EPICConstant.ERROR_MESSAGE)!=null )
                    saveDBErrorDetails(String.valueOf(jsonObjectError.get(EPICConstant.ERROR_CODE)), String.valueOf(jsonObjectError.get(EPICConstant.ERROR_MESSAGE)), String.valueOf(jsonObjectError.get(EPICConstant.ERROR_MESSAGE)), headerattr, userprofileBn, input, url); //to save record in DB 
                else
                    saveDBErrorDetails(String.valueOf(jsonObjectError.get(EPICConstant.ERROR_CODE)), EPICConstant.MESS_NOT_FOUND_FOR_ZERO_500, EPICConstant.MESS_NOT_FOUND_FOR_ZERO_500, headerattr, userprofileBn, input, url); //to save record in DB 
            
                }
            }
            else {
                ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}", EPICConstant.EXCEPTION_INTERNAL_500);
                throw new RuntimeException("Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
            }
        } catch (MalformedURLException maUrlExp) {
            if (ModelUtils.evaluateEL("#{pageFlowScope.epicSibelOrAppErrorCode}") == null) {
                ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}", EPICConstant.OTH2);
            }
            maUrlExp.printStackTrace();
            saveDBErrorDetails("MalformedURLException", maUrlExp.getMessage(), maUrlExp.getMessage(), headerattr, userprofileBn, input, url); //to save record in DB
            throw new MalformedURLException();
        } catch (SocketTimeoutException exception) {
            ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}", EPICConstant.IOEXP);
            log.error(exception);
            saveDBErrorDetails("SocketTimeoutException", exception.getMessage(), exception.getMessage(), headerattr, userprofileBn, input, url); //to save record in DB
        } catch (IOException ioExp) {
            ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}", EPICConstant.IOEXP);
            ioExp.printStackTrace();
            saveDBErrorDetails("IOException", ioExp.getMessage(), ioExp.getMessage(), headerattr, userprofileBn, input, url); //to save record in DB
            throw new IOException();
        } catch (Exception exp) {
            log.info("epicSibelOrAppErrorCode: "+ModelUtils.evaluateEL("#{pageFlowScope.epicSibelOrAppErrorCode}"));
            if (ModelUtils.evaluateEL("#{pageFlowScope.epicSibelOrAppErrorCode}") == null) {
                ModelUtils.setEL("#{pageFlowScope.epicSibelOrAppErrorCode}", EPICConstant.OTH2);
            }
            if (!rowInserted && (isSerivcEnabled!=null && isSerivcEnabled.equalsIgnoreCase("Y"))) {
                log.info("Below Code is commented as similar to LPG");
                newRow.setAttribute("ServiceOutput",  new BlobDomain(exp.getMessage().getBytes()));
                vo.insertRow(newRow);
                this.getDBTransaction().commit();
                rowInserted = true;
            }
            exp.printStackTrace();
            saveDBErrorDetails("Exception", exp.getMessage(), exp.getMessage(), headerattr, userprofileBn, input, url); //to save record in DB
            throw new Exception();
        } finally {
            //obj.returnConnectionToPool("customerPool", httpClient);
            httpClient.getConnectionManager().shutdown();
        }
       
        return str.toString();
    }


    /**
     * Container's getter for AuditTrailVo1.
     * @return AuditTrailVo1
     */
    public ViewObjectImpl getAuditTrailVo1() {
        return (ViewObjectImpl) findViewObject("AuditTrailVo1");
    }

    /**
     * Container's getter for LpgSvcCacheView1.
     * @return LpgSvcCacheView1
     */
    public LpgSvcCacheViewImpl getLpgSvcCacheView1() {
        return (LpgSvcCacheViewImpl) findViewObject("LpgSvcCacheView1");
    }

    /**
     * Container's getter for CustomerGeneralVo1.
     * @return CustomerGeneralVo1
     */
    public ViewObjectImpl getCustomerGeneralVo1() {
        return (ViewObjectImpl) findViewObject("CustomerGeneralVo1");
    }

    /**
     * Container's getter for SubsVouch_ConnVo1.
     * @return SubsVouch_ConnVo1
     */
    public ViewObjectImpl getSubsVouch_ConnVo1() {
        return (ViewObjectImpl) findViewObject("SubsVouch_ConnVo1");
    }


    /**
     * Container's getter for YesNo_GeneralVo1.
     * @return YesNo_GeneralVo1
     */
    public ViewObjectImpl getYesNo_GeneralVo1() {
        return (ViewObjectImpl) findViewObject("YesNo_GeneralVo1");
    }

    /**
     * Container's getter for AppListVo2.
     * @return AppListVo2
     */
    public ViewObjectImpl getAppListVo2_Partner() {
        return (ViewObjectImpl) findViewObject("AppListVo2_Partner");
    }

    /**
     *  Method explicitly for payment update
     ***/
    public List updatePaymentDetailsInCRM(List inputList) {
        log.info("INSIDE update Payment Details In CRM json Input:" + inputList.get(1));
        List retValue = new ArrayList();
        JSONObject jsonObject = null;
        retValue.add(0, "false");
        String str = null;
        log.info("update Payment Details list: " + inputList);
        JSONObject jsonInput = new JSONObject();
        try {
            str =
                callServicePost(inputList.get(0).toString(), (JSONObject) (inputList.get(1)),
                                EPICConstant.NON_SECURED_TOKEN,null);
            jsonObject = new JSONObject(str);
            log.info("json Response is: " + jsonObject);
            if (jsonObject.getString(EPICConstant.ERROR_CODE) != null &&
                jsonObject.getString(EPICConstant.ERROR_CODE).equalsIgnoreCase("0")) {
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
            } else {
                retValue.set(0, "false");
            }
        } catch (Exception payUpd) {
            retValue.set(0, "false");

            try {
                throw payUpd;
            } catch (Exception payUpdf) {
                payUpdf.printStackTrace();
            }
        }
        return retValue;
    }

    
    
    public List initiatePaymentDetails(List inputList) {
        log.info("INSIDE initiate Payment  In CRM json Input:" + inputList.get(1));
        List retValue = new ArrayList();
        JSONObject jsonObject = null;
        retValue.add(0, "false");
        String str = null;
        log.info("initiate Payment Details list: " + inputList);
        try {
            str = callServicePost(inputList.get(0).toString(), (JSONObject) (inputList.get(1)),EPICConstant.NON_SECURED_TOKEN,null);
            jsonObject = new JSONObject(str);
            log.info("json Response is: " + jsonObject);
            log.info("Error code -- "+jsonObject.getString(EPICConstant.ERROR_CODE));
            if (jsonObject.getString(EPICConstant.ERROR_CODE) != null &&
                jsonObject.getString(EPICConstant.ERROR_CODE).equalsIgnoreCase("0")) {
                retValue.set(0, "true");
                retValue.add(1, jsonObject);
            } else {
                log.info("Error code-->"+jsonObject.getString(EPICConstant.ERROR_CODE));
                retValue.set(0, "false");
            }
        } catch (Exception payUpd) {
            retValue.set(0, "false");

            try {
                throw payUpd;
            } catch (Exception payUpdf) {
                payUpdf.printStackTrace();
            }
        }
        return retValue;
    }
    
    /**
     * Container's getter for locationMapVo1.
     * @return locationMapVo1
     */
    public ViewObjectImpl getlocationMapVo1() {
        return (ViewObjectImpl) findViewObject("locationMapVo1");
    }

    /**
     * Container's getter for LocationCategoryVo1.
     * @return LocationCategoryVo1
     */
    public ViewObjectImpl getLocationCategoryVo1() {
        return (ViewObjectImpl) findViewObject("LocationCategoryVo1");
    }

    /**
     * Container's getter for ERRORHANDLERVO1.
     * @return ERRORHANDLERVO1
     */
    public ERRORHANDLERVOImpl getERRORHANDLERVO1() {
        return (ERRORHANDLERVOImpl) findViewObject("ERRORHANDLERVO1");
    }

    public void fetchErrorMessage(String errorCode) {

        log.info("inside CustomerApp fetchErrorMessage errorCode::" + errorCode);
        ViewObjectImpl voErr = this.getERRORHANDLERVO1();
        Row[] rr = voErr.getFilteredRows("Errorcode", errorCode);
        if (rr.length > 0) {
            if (rr[0].getAttribute("Errorcode") != null) {
                errorCode = rr[0].getAttribute("Errorcode").toString();
            }
        } else {
            errorCode = EPICConstant.OTH1;
        }
        voErr.clearCache();
        voErr.clearViewCriterias();
        String whereClause = "ERRORCODE='" + errorCode + "'";
        voErr.setWhereClause(whereClause);
        log.info("Customer App ErrorMessage end with " + voErr.getEstimatedRowCount() + " error message type");
    }


    public void initLpgDistVo(String ftlFlag, String zipcodeFilter) {
        System.out.println("ftlFlag "+ftlFlag+"    --zipcodeFilter "+zipcodeFilter);
//        ViewObjectImpl categoryVo=this.getLocationCategoryVo1();
//        String filterCategory="CATEGORYTYPE='"+ftlFlag+"'";
//        categoryVo.setWhereClause(filterCategory);
//        categoryVo.executeQuery();
        
        ViewObjectImpl lpgDistMaster = this.getLpgDistMaster1();
        String whereClauseString = "SAP_CODE='-1'";
        lpgDistMaster.setWhereClause(whereClauseString);
        lpgDistMaster.executeQuery();
        ViewObjectImpl autolpgDistMaster = this.getAutolpgDistMasterVo1();
        
        //        String whereClauseString1 ="SAP_CODE,='-1'";
        autolpgDistMaster.setWhereClause(whereClauseString);
        autolpgDistMaster.executeQuery();

    }


    public void populateLPGProducts(String jsonInpString) {

        log.info("Inside populateLPGProducts Start");
        
        JSONObject jsonResponse = new JSONObject(jsonInpString);

        ViewObject lpgStoveVo = this.getSvLpgStoveProductVo1();
        ViewObject lpgHoseVo = this.getSvLpgHoseProductVo1();
        lpgStoveVo.executeEmptyRowSet();
        lpgHoseVo.executeEmptyRowSet();
        String lpgStoveCommonVal = ModelUtils.createUniqueID();
        String lpgHoseCommonVal = ModelUtils.createUniqueID();
        JSONObject invenMgmtListObj =
            jsonResponse.isNull("InventoryMgmtList") ? null : jsonResponse.getJSONObject("InventoryMgmtList");
        if (invenMgmtListObj != null) {
            JSONArray invenLocArrayObj =
                invenMgmtListObj.isNull("InventoryLocation") ? null :
                invenMgmtListObj.getJSONArray("InventoryLocation");
            if (invenLocArrayObj != null) {
                for (int j = 0; j < invenLocArrayObj.length(); j++) {
                    JSONObject invenLocObj = invenLocArrayObj.getJSONObject(j);
                    JSONObject invocProdListObj =
                        invenLocObj.isNull("InvocProductList") ? null : invenLocObj.getJSONObject("InvocProductList");

                    if (invocProdListObj != null) {
                        JSONArray invocProductArrayObj =
                            invocProdListObj.isNull("InvocProduct") ? null :
                            invocProdListObj.getJSONArray("InvocProduct");
                        if (invocProductArrayObj != null) {
                            for (int k = 0; k < invocProductArrayObj.length(); k++) {
                                JSONObject invocProductobj = invocProductArrayObj.getJSONObject(k);
                                String vType = null;
                                String vProductType = null;

                                vProductType =
                                    invocProductobj.isNull("ProductType") ? null :
                                    invocProductobj.getString("ProductType");
                                if (vProductType != null &&
                                    vProductType.equalsIgnoreCase(EPICConstant.SV_PROD_TYPE_LPGSTOVE)) {
                                    Row row = lpgStoveVo.createRow();
                                    vType =
                                        (invocProductobj.isNull("AttributeValue") ? "" :
                                         invocProductobj.getString("AttributeValue")) + " " +
                                        (invocProductobj.isNull("AttributeName") ? "" :
                                         invocProductobj.getString("AttributeName"));
                                    row.setAttribute("Type", vType);
                                    row.setAttribute("ProductId",
                                                     invocProductobj.isNull("ProductID2") ? "" :
                                                     invocProductobj.get("ProductID2"));
                                    row.setAttribute("ProductCode",
                                                     invocProductobj.isNull("ProductCode") ? "" :
                                                     invocProductobj.get("ProductCode"));
                                    row.setAttribute("ProductName",
                                                     invocProductobj.isNull("ProductName") ? "" :
                                                     invocProductobj.get("ProductName"));
                                    row.setAttribute("Mrp",
                                                     invocProductobj.isNull("ListPrice") ? "" :
                                                     invocProductobj.get("ListPrice"));
                                    row.setAttribute("Brand",
                                                     invocProductobj.isNull("Brand") ? "" :
                                                     invocProductobj.get("Brand"));
                                    row.setAttribute("Description",
                                                     invocProductobj.isNull("ProductDescription") ? "" :
                                                     invocProductobj.get("ProductDescription"));
                                    row.setAttribute("UniqueProductIndex",lpgStoveCommonVal);
                                    lpgStoveVo.insertRow(row);
                                } else if (vProductType != null &&
                                           vProductType.equalsIgnoreCase(EPICConstant.SV_PROD_TYPE_LPGHOSE)) {
                                    Row row = lpgHoseVo.createRow();
                                    vType =
                                        (invocProductobj.isNull("AttributeValue") ? "" :
                                         invocProductobj.getString("AttributeValue")) + " " +
                                        (invocProductobj.isNull("AttributeName") ? "" :
                                         invocProductobj.getString("AttributeName"));
                                    row.setAttribute("Type", vType);
                                    row.setAttribute("ProductId",
                                                     invocProductobj.isNull("ProductID2") ? "" :
                                                     invocProductobj.get("ProductID2"));
                                    row.setAttribute("ProductCode",
                                                     invocProductobj.isNull("ProductCode") ? "" :
                                                     invocProductobj.get("ProductCode"));
                                    row.setAttribute("ProductName",
                                                     invocProductobj.isNull("ProductName") ? "" :
                                                     invocProductobj.get("ProductName"));
                                    row.setAttribute("Mrp",
                                                     invocProductobj.isNull("ListPrice") ? "" :
                                                     invocProductobj.get("ListPrice"));
                                    row.setAttribute("Brand",
                                                     invocProductobj.isNull("Brand") ? "" :
                                                     invocProductobj.get("Brand"));
                                    row.setAttribute("Description",
                                                     invocProductobj.isNull("ProductDescription") ? "" :
                                                     invocProductobj.get("ProductDescription"));
                                    row.setAttribute("UniqueProductIndex",lpgHoseCommonVal);
                                    lpgHoseVo.insertRow(row);

                                }
                            }
                        }
                    }
                }
            }
        }
        this.getDBTransaction().commit();
        log.info("Inside populateLPGProducts Start");
    }


    /**
     * Container's getter for AutolpgDistMasterVo1.
     * @return AutolpgDistMasterVo1
     */
    public AutolpgDistMasterVoImpl getAutolpgDistMasterVo1() {
        return (AutolpgDistMasterVoImpl) findViewObject("AutolpgDistMasterVo1");
    }

    /**
     * Container's getter for LpgDistMaster1.
     * @return LpgDistMaster1
     */
    public LpgDistMasterImpl getLpgDistMaster1() {
        return (LpgDistMasterImpl) findViewObject("LpgDistMaster1");
    }

    /**
     * Container's getter for NetworkLocatorVo1.
     * @return NetworkLocatorVo1
     */
    public NetworkLocatorVoImpl getNetworkLocatorVo1() {
        return (NetworkLocatorVoImpl) findViewObject("NetworkLocatorVo1");
    }

    /**
     * Container's getter for LinkedLpgVO1.
     * @return LinkedLpgVO1
     */
    public LinkedLpgVOImpl getLinkedLpgVO1() {
        return (LinkedLpgVOImpl) findViewObject("LinkedLpgVO1");
    }

    /**
     * Container's getter for GrievForm1.
     * @return GrievForm1
     */
    public GrievFormImpl getGrievForm1() {
        return (GrievFormImpl) findViewObject("GrievForm1");
    }

    /**
     * Container's getter for GrievSubCatVO1.
     * @return GrievSubCatVO1
     */
    public GrievSubCatVOImpl getGrievSubCatVO1() {
        return (GrievSubCatVOImpl) findViewObject("GrievSubCatVO1");
    }

    /**
     * Container's getter for LPGAreaOfficeMasterVO1.
     * @return LPGAreaOfficeMasterVO1
     */
    public LPGAreaOfficeMasterVOImpl getLPGAreaOfficeMasterVO1() {
        return (LPGAreaOfficeMasterVOImpl) findViewObject("LPGAreaOfficeMasterVO1");
    }

    /**
     * Container's getter for LPGAreaOfficeVO1.
     * @return LPGAreaOfficeVO1
     */
    public LPGAreaOfficeVOImpl getLPGAreaOfficeVO1() {
        return (LPGAreaOfficeVOImpl) findViewObject("LPGAreaOfficeVO1");
    }

    /**
     * Container's getter for LPG_POA_Vo1.
     * @return LPG_POA_Vo1
     */
    public ViewObjectImpl getLPG_POA_Vo1() {
        return (ViewObjectImpl) findViewObject("LPG_POA_Vo1");
    }

    /**
     * Container's getter for LPG_POI_Vo1.
     * @return LPG_POI_Vo1
     */
    public ViewObjectImpl getLPG_POI_Vo1() {
        return (ViewObjectImpl) findViewObject("LPG_POI_Vo1");
    }

    /**
     * Container's getter for ReportsChartVO2.
     * @return ReportsChartVO2
     */
    public ReportsChartVOImpl getReportsChartVO2() {
        return (ReportsChartVOImpl) findViewObject("ReportsChartVO2");
    }

    /**
     * Container's getter for AppListVo2.
     * @return AppListVo2
     */
    public ViewObjectImpl getAppListVo2_Customer() {
        return (ViewObjectImpl) findViewObject("AppListVo2_Customer");
    }

    /**
     * Container's getter for AppListVo2.
     * @return AppListVo2
     */
    public ViewObjectImpl getAppListVo2_Retail() {
        return (ViewObjectImpl) findViewObject("AppListVo2_Retail");
    }

    /**
     * Container's getter for ROLocatorVO1.
     * @return ROLocatorVO1
     */
    public ROLocatorVOImpl getROLocatorVO1() {
        return (ROLocatorVOImpl) findViewObject("ROLocatorVO1");
    }

    /**
     * Container's getter for XtraRCustomerDetailsVO1.
     * @return XtraRCustomerDetailsVO1
     */
    public XtraRCustomerDetailsVOImpl getXtraRCustomerDetailsVO1() {
        return (XtraRCustomerDetailsVOImpl) findViewObject("XtraRCustomerDetailsVO1");
    }

    /**
     * Container's getter for XtraRCustVehicleDetailsVO1.
     * @return XtraRCustVehicleDetailsVO1
     */
    public XtraRCustVehicleDetailsVOImpl getXtraRCustVehicleDetailsVO1() {
        return (XtraRCustVehicleDetailsVOImpl) findViewObject("XtraRCustVehicleDetailsVO1");
    }

    /**
     * Container's getter for XtraRewardsTxnVO1.
     * @return XtraRewardsTxnVO1
     */
    public XtraRewardsTxnVOImpl getXtraRewardsTxnVO1() {
        return (XtraRewardsTxnVOImpl) findViewObject("XtraRewardsTxnVO1");
    }

    /**
     * Container's getter for XtraRCustomerDetailsVO2.
     * @return XtraRCustomerDetailsVO2
     */
    public XtraRCustomerDetailsVOImpl getXtraRCustomerDetailsVO2() {
        return (XtraRCustomerDetailsVOImpl) findViewObject("XtraRCustomerDetailsVO2");
    }

    /**
     * Container's getter for XtraRewardsTxnVO2.
     * @return XtraRewardsTxnVO2
     */
    public XtraRewardsTxnVOImpl getXtraRewardsTxnVO2() {
        return (XtraRewardsTxnVOImpl) findViewObject("XtraRewardsTxnVO2");
    }
    public List callChartAsync(List inputList)  {
        System.out.println("*****************callChartAsync");
        List <Object>lstReturn=new ArrayList<Object>();
        List <Object>retValue=new ArrayList<Object>();
        System.out.println("*****************lstReturn1="+lstReturn);
        lstReturn.add(0,"1");
        System.out.println("*****************lstReturn2="+lstReturn);
        BufferedReader brInput = null;
        BufferedReader br = null;
        try
        {
            System.out.println("callChartAsync==>"+inputList.get(0));
            JSONObject inputJason=(JSONObject)(inputList.get(0));
            System.out.println("inputJasoncallChartAsync==>"+inputJason);
            String url=String.valueOf(inputList.get(1));
            System.out.println("URL JasoncallChartAsync==>"+url);
            String authStringEnc="";
            String name = EPICIOCLResourceModel.findKeyValue("EPIC_IOCL_SVC_ID");
            String password = EPICIOCLResourceModel.findKeyValue("EPIC_IOCL_SVC_PWD");
            String authString = name + ":" + password;
            authStringEnc = new BASE64Encoder().encode(authString.getBytes());
            authStringEnc = "Basic " + authStringEnc;
            log.info("Input callChartAsync" + EPICConstant.UCMID + " : " +
                             (inputJason.has(EPICConstant.UCMID) ? inputJason.get(EPICConstant.UCMID) : "null"));

                    log.info("Input Parameter:callChartAsync " + inputJason);
                    log.info("mapSession.get(EPICConstant.USER_TRACKING_ID " + String.valueOf(String.valueOf(inputList.get(2))));
                    StringEntity input = new StringEntity(inputJason.toString());

                    
                    log.info("Data Sent By Service =callChartAsync " + input.toString());
                    

                    String output = null;
                    StringBuffer str = new StringBuffer();
                    StringBuffer strForTrackingId = new StringBuffer();
                    String outputForTrackingId = null;
                    String isAuditTrailEnabled = ModelUtils.findKeyValue("IS_AUDIT_TRAIL_ENABLED");
                  
                    JSONObject jsonObj = null;
                    String trackId = null;
                    ViewObjectImpl vo = null;
                    Row newRow = null;
                    if (isAuditTrailEnabled.equalsIgnoreCase("Y")) {
                        brInput = new BufferedReader(new InputStreamReader((input.getContent())));
                        log.info("Output from Server callChartAsync.... \n");
            
                    while ((outputForTrackingId = brInput.readLine()) != null) {
                        strForTrackingId.append(outputForTrackingId);
                    }
                
                        jsonObj = new JSONObject(strForTrackingId.toString());
                        trackId = (String) jsonObj.get("TrackingId");
                        vo = this.getAuditTrailVo1();
                        newRow = vo.createRow();
                        newRow.setAttribute("TrackingId", trackId);
                        newRow.setAttribute("ServiceInput", new BlobDomain((String.valueOf(jsonObj)).getBytes()));
                        newRow.setAttribute("ServiceUrl", url);
                      //  newRow.setAttribute("UserId", String.valueOf(ModelUtils.evaluateEL("#{sessionScope.userDetails.idamUId}")));
                        //newRow.setAttribute("UserSessionTrackingId", String.valueOf(ModelUtils.evaluateEL("#{sessionScope.UserTrackingId}")));
                        
                        newRow.setAttribute("UserId", String.valueOf(String.valueOf(inputList.get(2))));
                        newRow.setAttribute("UserSessionTrackingId", String.valueOf(String.valueOf(inputList.get(3))));
                        }
                    //RestConnManager obj = new RestConnManager();
                    HttpClient httpClient = null;
                   
                        System.out.println("CONNECTION_TIMEOUT "+EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT"));
                          @SuppressWarnings("deprecation")
                              
                        RequestConfig requestConfig = RequestConfig.custom()
                        .setConnectTimeout(Integer.parseInt(EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT")))
                        .setConnectionRequestTimeout(Integer.parseInt(EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT")))
                        .setSocketTimeout(Integer.parseInt(EPICIOCLResourceModel.findKeyValue("CONNECTION_TIMEOUT"))).build();
                         
                         httpClient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).build();


                      //  httpClient = (HttpClient) obj.CreateConnection("customerPool");
                        log.info("CustomerAppModile=httpClient" + httpClient);

                        HttpPost postRequest = new HttpPost(url);
                        input.setContentType("application/json");
                        postRequest.setEntity(input);
                        postRequest.addHeader("accept", "Application/json");
                        postRequest.setHeader("Authorization", authStringEnc);
                        long start = System.currentTimeMillis();
                        log.info("Method execution start time " + start + " milliseconds");
                        HttpResponse response = httpClient.execute(postRequest);
                        long endTime = System.currentTimeMillis();
                        log.info("Method execution end time " + endTime + " milliseconds");
                        long elapsedTime = System.currentTimeMillis() - start;
                        log.info("Service Response Received in: " + elapsedTime + " milliseconds");
                        log.info("Status Code from Service " + response.getStatusLine().getStatusCode());
                        log.info(response.getStatusLine().getStatusCode());
                        if (response.getStatusLine().getStatusCode() == 500) {
                            if (isAuditTrailEnabled.equalsIgnoreCase("Y")) {
                                newRow.setAttribute("ServiceOutput", new BlobDomain(("No response from service with Error code = 500").getBytes()));
                                vo.insertRow(newRow);
                                this.getDBTransaction().commit();
                            }
                            throw new RuntimeException("Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
                        }


                        br = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
                        log.info("Output from Server ..callChartAsync.. \n");
                      
                    try
                    {
                    while ((output = br.readLine()) != null) {
                        log.info(output);
                        str.append(output);
                    }
                    }finally{
                        if(br!=null)
                            br.close();
                    }
               
                        //    httpClient.getConnectionManager().shutdown();
                        
                        
                        if (isAuditTrailEnabled.equalsIgnoreCase("Y")) {
                            newRow.setAttribute("ServiceOutput", new BlobDomain((String.valueOf(str)).getBytes()));
                            vo.insertRow(newRow);
                            this.getDBTransaction().commit();
                        }
                        

                        if(ModelUtils.isJSONValid(str.toString()))
                        {
                        JSONObject jsonObject = new JSONObject(str.toString());
                        if (jsonObject.has(EPICConstant.ERROR_CODE) &&
                            String.valueOf(jsonObject.get(EPICConstant.ERROR_CODE))
                            .equalsIgnoreCase(EPICConstant.ZERO_VAL_SUCCES_CASE)) {
                            lstReturn.set(0,"0");
                            lstReturn.add(1,str.toString());
                            
                            System.out.println("*****&&&&&&&&&");
                            
                            //retValue.add(0, "true");
                           //retValue.add(1, jsonObject);
                            //retValue.add(2, String.valueOf(inputList.get(2)));
                            
                         //   this.getReportsChartVO2().createReportDataList(retValue);
                           // System.out.println("*****&SUCESS&&&&&&&&");
                        }
                        
                        }
                        else {
                            throw new RuntimeException("Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
                        }
                    
        }
        catch (MalformedURLException maUrlExp) {
           maUrlExp.printStackTrace();
            try {
                throw new MalformedURLException();
            } catch (MalformedURLException e) {
            }
        } catch (SocketTimeoutException exception) {
           exception.printStackTrace();
        } catch (IOException ioExp) {
           ioExp.printStackTrace();
            try {
                throw new IOException();
            } catch (IOException e) {
            }
        }
        catch(Exception e) {
            System.out.println("Exception in my method"+e);
            e.printStackTrace();
        }
        finally {
                            
                try {
                    if (brInput != null)
                    brInput.close();
                   } catch (IOException e) {
                }
        }
        return lstReturn;
    }
    
    
    public void insertIntoRoLocator(List jsonArrayList){
           System.out.println("insertIntoRoLocator");
           System.out.println("jsonArrayList "+jsonArrayList);
           JSONObject jsonInput = new JSONObject();
           jsonInput=(JSONObject) (jsonArrayList.get(0));
           System.out.println("jsonInput "+jsonInput);
           JSONArray arrayObj = jsonInput.getJSONArray("Data");
           System.out.println("arrayObj "+arrayObj);
           jsonArrayList.get(0);
           this.getROLocatorVO1().insertFromJasonArray(arrayObj);

       }
    
    public void insertIntoAoLocator(List jsonArrayList){
           System.out.println("insertIntoAoLocator");
           System.out.println("jsonArrayList "+jsonArrayList);
           JSONObject jsonInput = new JSONObject();
           jsonInput=(JSONObject) (jsonArrayList.get(0));
           System.out.println("jsonInput "+jsonInput);
           JSONArray arrayObj = jsonInput.getJSONArray("Data");
           System.out.println("arrayObj "+arrayObj);
           jsonArrayList.get(0);
           this.getAOLocatorVO1().insertAOFromJasonArray(arrayObj);

       }
    
    public void insertIntoPartnerDistLocator(List jsonArrayList){
           System.out.println("insertIntoRoLocator");
           System.out.println("jsonArrayList "+jsonArrayList);
           JSONObject jsonInput = new JSONObject();
           jsonInput=(JSONObject) (jsonArrayList.get(0));
           System.out.println("jsonInput "+jsonInput);
           JSONArray arrayObj = jsonInput.getJSONArray("Data");
           System.out.println("arrayObj "+arrayObj);
           jsonArrayList.get(0);
           this.getPartnerLocatorVO1().insertPDistributorFromJasonArray(arrayObj);
       }
    
    
    public void insertIntoPartnerStockLocator(List jsonArrayList){
           System.out.println("insertIntoRoLocator");
           System.out.println("jsonArrayList "+jsonArrayList);
           JSONObject jsonInput = new JSONObject();
           jsonInput=(JSONObject) (jsonArrayList.get(0));
           System.out.println("jsonInput "+jsonInput);
           JSONArray arrayObj = jsonInput.getJSONArray("Data");
           System.out.println("arrayObj "+arrayObj);
           jsonArrayList.get(0);
           this.getPartnerLocatorVO1().insertPStockistFromJasonArray(arrayObj);

       }

    /**
     * Container's getter for VehicleDetailsVo1.
     * @return VehicleDetailsVo1
     */
    public ViewObjectImpl getVehicleDetailsVo1() {
        return (ViewObjectImpl) findViewObject("VehicleDetailsVo1");
    }

    /**
     * Container's getter for ProfileEnrichmentVo1.
     * @return ProfileEnrichmentVo1
     */
    public ProfileEnrichmentVoImpl getProfileEnrichmentVo1() {
        return (ProfileEnrichmentVoImpl) findViewObject("ProfileEnrichmentVo1");
    }

    /**
     * Container's getter for StatesVo1.
     * @return StatesVo1
     */
    public ViewObjectImpl getStatesVo1() {
        return (ViewObjectImpl) findViewObject("StatesVo1");
    }

    /**
     * Container's getter for DistrictVo1.
     * @return DistrictVo1
     */
    public ViewObjectImpl getDistrictVo1() {
        return (ViewObjectImpl) findViewObject("DistrictVo1");
    }

    /**
     * Container's getter for GenderVo1.
     * @return GenderVo1
     */
    public ViewObjectImpl getGenderVo1() {
        return (ViewObjectImpl) findViewObject("GenderVo1");
    }

    /**
     * Container's getter for VehicleTypeVo1.
     * @return VehicleTypeVo1
     */
    public ViewObjectImpl getVehicleTypeVo1() {
        return (ViewObjectImpl) findViewObject("VehicleTypeVo1");
    }

    /**
     * Container's getter for FuelTypeVo1.
     * @return FuelTypeVo1
     */
    public ViewObjectImpl getFuelTypeVo1() {
        return (ViewObjectImpl) findViewObject("FuelTypeVo1");
    }
    
    public void insertVehicleTypeRecord(String count)
    {
        log.info("Inside insertVehicleType");
        ViewObjectImpl vo = this.getVehicleDetailsDbVo1();
        log.info("Row Count Before"+vo.getRowCount());

        if (count != null && count.equalsIgnoreCase("0")) {
            vo.executeEmptyRowSet();
        }
        
        Row newRow = vo.createRow();
        vo.insertRow(newRow);
        log.info("Row Count After"+vo.getRowCount());
        log.info("New row inserted");
    }

    /**
     * Container's getter for DealerFeedbackVO1.
     * @return DealerFeedbackVO1
     */
    public DealerFeedbackVOImpl getDealerFeedbackVO1() {
        return (DealerFeedbackVOImpl) findViewObject("DealerFeedbackVO1");
    }

    /**
     * Container's getter for LineBussinessVO1.
     * @return LineBussinessVO1
     */
    public ViewObjectImpl getLineBussinessVO1() {
        return (ViewObjectImpl) findViewObject("LineBussinessVO1");
    }

    /**
     * Container's getter for PrefixVo1.
     * @return PrefixVo1
     */
    public ViewObjectImpl getPrefixVo1() {
        return (ViewObjectImpl) findViewObject("PrefixVo1");
    }
    
    
    public void insertProfileEnrichInfo(String FirstName,String LastName,String EmailId,String MobileNo)
    {
        log.info("Inside insertInProfile Start");
        
        ViewObject vo = this.getEnrollmentDbVo1();
        vo.executeEmptyRowSet();
        
        Row rr = vo.createRow();
        if (FirstName != null&& !FirstName.equalsIgnoreCase("null")) {
            rr.setAttribute("FirstName", FirstName);
        }
        if (LastName != null&& !LastName.equalsIgnoreCase("null")) {
            rr.setAttribute("LastName", LastName);
        }
        if (EmailId != null && !EmailId.equalsIgnoreCase("null")) {
            rr.setAttribute("EmailId", EmailId);
        }
        if (MobileNo != null&& !MobileNo.equalsIgnoreCase("null")) {
            rr.setAttribute("MobileNo", MobileNo);
        }
        vo.insertRow(rr);
        log.info("Inside insertInProfile End");
    }

    public void insertRetailEnrichInfo(String FirstName,String LastName,String EmailId,String MobileNo)
    {
        log.info("Inside insertRetailEnrichInfo Start");
        ViewObject vo = this.getRetailOnboardingVO1();
        vo.executeEmptyRowSet();
        
        Row rr = vo.createRow();
        if (FirstName != null&& !FirstName.equalsIgnoreCase("null")) {
            rr.setAttribute("firstname", FirstName);
        }
        if (LastName != null&& !LastName.equalsIgnoreCase("null")) {
            rr.setAttribute("lastname", LastName);
        }
        if (EmailId != null && !EmailId.equalsIgnoreCase("null")) {
            rr.setAttribute("emailId", EmailId);
        }
        if (MobileNo != null&& !MobileNo.equalsIgnoreCase("null")) {
            rr.setAttribute("mobNum", MobileNo);
        }
        vo.insertRow(rr);
        log.info("Inside insertRetailEnrichInfo End");
    }
    /**
     * Container's getter for VehicleOwnershipVO1.
     * @return VehicleOwnershipVO1
     */
    public ViewObjectImpl getVehicleOwnershipVO1() {
        return (ViewObjectImpl) findViewObject("VehicleOwnershipVO1");
    }


    /**
     * Container's getter for RetailOnboardingVO1.
     * @return RetailOnboardingVO1
     */
    public RetailOnboardingVOImpl getRetailOnboardingVO1() {
        return (RetailOnboardingVOImpl) findViewObject("RetailOnboardingVO1");
    }

    /**
     * Container's getter for RetailUserDetailsVo1.
     * @return RetailUserDetailsVo1
     */
    public RetailUserDetailsVoImpl getRetailUserDetailsVo1() {
        return (RetailUserDetailsVoImpl) findViewObject("RetailUserDetailsVo1");
    }

    /**
     * Container's getter for ServiceLogsSaveVO1.
     * @return ServiceLogsSaveVO1
     */
    public ServiceLogsSaveVOImpl getServiceLogsSaveVO1() {
        return (ServiceLogsSaveVOImpl) findViewObject("ServiceLogsSaveVO1");
    }
    
    public  String checkServiceMap(String url,ioclcommonproj.com.iocl.beans.UserProfileBean userprofileBn) {
           String isEnabled="N";
           Map<String, ServiceParam> serviceMap=null;
           if(userprofileBn!=null) {
               if(userprofileBn.getServiceDetails()!=null) {
                   serviceMap=userprofileBn.getServiceDetails();
                   if(serviceMap!=null && serviceMap.size()>0){
                       for (String key : serviceMap.keySet()) {
                                      if (key != null && serviceMap.get(key) != null) {
                                          ServiceParam serviceParma = serviceMap.get(key);
                                          if(serviceParma!=null)
                                          {
                                              if(serviceParma.getServiceShortURL()!=null && serviceParma.getIsLogEnabled()!=null)
                                                  if (url.endsWith(serviceParma.getServiceShortURL())) {
                                                      isEnabled=serviceParma.getIsLogEnabled();
                                                      log.info("first part isEnabled= "+isEnabled);
                                                      return isEnabled;
                                                  }
                                          }
                                      }
                                  }
                   }
               }
               else {
                   isEnabled=fetchSVCStatus(url);
                   log.info("third part isEnabled= "+isEnabled);
                   return isEnabled;
               }
           }
           else {
               isEnabled=fetchSVCStatus(url);
               log.info("second part isEnabled= "+isEnabled);
               return isEnabled;
           }
           return isEnabled;
       }
    public String fetchSVCStatus(String url) {
        String ret="N";
        try {
            log.info("inside fetchSVCStatus");

            
            ViewObjectImpl vo=this.getServiceLogsSaveVO1();
            vo.first();
            RowSetIterator rsi=vo.createRowSetIterator(null);
            while(rsi.hasNext()) {
                Row row=rsi.next();
                if(row!=null) {
                    if(row.getAttribute("SvcShortUrl")!=null && row.getAttribute("IsSaveLogs")!=null && url!=null) {
                        if(url.endsWith(String.valueOf(row.getAttribute("SvcShortUrl")))) {
                            ret=String.valueOf(row.getAttribute("IsSaveLogs"));
                            log.info("ret==========fetchSVCStatus"+ret);
                            return ret;
                        }
                        
                        
                    }
                }
               
            }
            rsi.closeRowSetIterator();
        }catch(Exception e) {
            log.error("fetchLoanChildDtls"+e);
            e.printStackTrace();
        }
        log.info("returing==========fetchSVCStatus"+ret);
        return ret;
    }

    /**
     * Container's getter for LpgErrorsTrailEOView1.
     * @return LpgErrorsTrailEOView1
     */
    public LpgErrorsTrailEOViewImpl getLpgErrorsTrailEOView1() {
        return (LpgErrorsTrailEOViewImpl) findViewObject("LpgErrorsTrailEOView1");
    }
    //worked on :need to store records in audit trail in case of error
    public void saveDBErrorDetails( String lpgErrorCode,String lpgErrorDesc,String expMessage,String headerattr,ioclcommonproj.com.iocl.beans.UserProfileBean userprofileBn,StringEntity input,String url) throws IOException {
        log.info("under Customer saveDBErrorDetails to save in case of error");
        BufferedReader brInput=null;
        JSONObject jsonObj =null;
        String outputForTrackingId=null;
        StringBuffer strForTrackingId=new StringBuffer();
        Map<String, Object> mapSession = FacesContext.getCurrentInstance()
                                                                         .getExternalContext()
                                                                         .getSessionMap();
        
        
        String isAuditErrorFlag="N";
        log.info("cust:=mapSession.get(SESSION_PORTAP_IOCL_CONFIG)"+mapSession.get("SESSION_PORTAP_IOCL_CONFIG"));
        if(mapSession.get("SESSION_PORTAP_IOCL_CONFIG")!=null)
        {
               Map<String,String> mapProp=(Map<String,String>)mapSession.get("SESSION_PORTAP_IOCL_CONFIG");
               isAuditErrorFlag=mapProp.get("IS_ERROR_TRAIL_ENABLED")==null?"N":mapProp.get("IS_ERROR_TRAIL_ENABLED");
               log.info("cust:=mapSession.get(SESSION_PORTAP_IOCL_CONFIG)"+mapSession.get("SESSION_PORTAP_IOCL_CONFIG")); 
               log.info("isAuditErrorFlag="+isAuditErrorFlag); 
        }
        if(isAuditErrorFlag!=null && isAuditErrorFlag.equalsIgnoreCase("Y"))
        {
        Map<String, String> map = FacesContext.getCurrentInstance()
                                                                  .getExternalContext()
                                                                  .getRequestHeaderMap();
               brInput = new BufferedReader(new InputStreamReader((input.getContent())));
                log.info("Output from Server .... \n");
                log.info("ServiceURl: "+url);
                try{
                while ((outputForTrackingId = brInput.readLine()) != null) {
                    log.info(outputForTrackingId);
                    strForTrackingId.append(outputForTrackingId);
                }
                }
                finally{
                    if(brInput != null) brInput.close();
                }
                jsonObj = new ioclcommonproj.com.iocl.utils.JSONObject(strForTrackingId.toString());
                String trackId = (String) jsonObj.get("TrackingId");
                ViewObject vo = this.getLpgErrorsTrailEOView1();
                Row newRow = vo.createRow();
                newRow.setAttribute("TrackingId", trackId);
                newRow.setAttribute("ServiceInput", new BlobDomain((String.valueOf(jsonObj)).getBytes()));
                newRow.setAttribute("ServiceUrl", url);
                /**-----------saveDBErrorDetails Setting IdamMobileNo to UserId Field--------------**/
                newRow.setAttribute("UserId", String.valueOf(userprofileBn != null ? userprofileBn.getIdamUserMobileNo() : map.get("Mobile")));
                newRow.setAttribute("UserSessionTrackingId", String.valueOf(mapSession.get("UserTrackingId")));
                log.info(" saveDBErrorDetails Setting HeaderAttribute");
                newRow.setAttribute("HeaderAttribute",headerattr);
                newRow.setAttribute("ServiceOutput", new BlobDomain(expMessage.getBytes()));
                
                newRow.setAttribute("LpgErrorCode", lpgErrorCode);
                newRow.setAttribute("LpgErrorDesc", lpgErrorDesc);
                
                vo.insertRow(newRow);
                this.getDBTransaction().commit();
        /*
         * This tracking number will be sent to Admin via mail in case user lands on error page
        */
        mapSession.put("TRACKING_NUMBER_MAIL_PORTAL", String.valueOf(mapSession.get("UserTrackingId")));
                log.info("doen  Customer saveDBErrorDetails to save in case of error");
               }
                
    }

    /**
     * Container's getter for IoclCommonConfigVO1.
     * @return IoclCommonConfigVO1
     */
    public IoclCommonConfigVOImpl getIoclCommonConfigVO1() {
        return (IoclCommonConfigVOImpl) findViewObject("IoclCommonConfigVO1");
    }
    public void fetchAssignPropMap( ) {
                   String val="";
                   String key="";
           Map<String, Object> mapSession = FacesContext.getCurrentInstance()
                                                                            .getExternalContext()
                                                                            .getSessionMap();
           try {
               log.info("inside Customer fetchAssignPropMap");

               
               ViewObjectImpl vo=this.getIoclCommonConfigVO1();
               vo.first();
               RowSetIterator rsi=vo.createRowSetIterator(null);
               Map<String,String> mapProp=new java.util.HashMap<String,String>();
               while(rsi.hasNext()) {
                   Row row=rsi.next();
                   if(row!=null) {
                       if(row.getAttribute("PropKey")!=null && row.getAttribute("PropValue")!=null ) {
                           if(row.getAttribute("PropKey").toString()!=null && row.getAttribute("PropValue").toString()!=null ) {
                                   key=String.valueOf(row.getAttribute("PropKey"));
                                   val=String.valueOf(row.getAttribute("PropValue"));
                                    mapProp.put(key, val);
                                   log.info("key========"+key+" val"+val);
                           }
                                                      
                       }
                   }
                  
               }
               rsi.closeRowSetIterator();
               
               mapSession.put("SESSION_PORTAP_IOCL_CONFIG", mapProp);
           }catch(Exception e) {
               log.error("fetchAssignPropMap Customer"+e);
               e.printStackTrace();
           }
           log.info("ends=======fetchAssignPropMap=");
           
       }
    
    public void populateXRTransaction(JSONObject xrInputTxnJson)
    {
        ViewObjectImpl pointsEarnedVo = this.getXtraRewardsTxnVO1();
        ViewObjectImpl pointsRedeemVo = this.getXtraRewardsTxnVO2();
        
        pointsEarnedVo.executeEmptyRowSet();
        pointsRedeemVo.executeEmptyRowSet();
        
        String transactionType = null;
        Row row = null;
        if(xrInputTxnJson != null)
        {
            JSONObject jsonObjectResData = xrInputTxnJson.isNull("ResponseData") ? null : xrInputTxnJson.getJSONObject("ResponseData");
            if (jsonObjectResData != null) {
                JSONArray arrObj = jsonObjectResData.isNull("TransactionDetails") ? null : jsonObjectResData.getJSONArray("TransactionDetails");
                if (arrObj != null) {
                    for (int i = 0; i < arrObj.length(); i++) {
                        JSONObject jsonObjectXRTxnDetRow = arrObj.getJSONObject(i);
                        transactionType = jsonObjectXRTxnDetRow.isNull("TransactionType") ? null : jsonObjectXRTxnDetRow.getString("TransactionType");

                        if (transactionType != null) {
                            if (transactionType.equalsIgnoreCase("TXN")) {
                                row = this.getXtraRewardsTxnVO1().createRow();
                            } else if (transactionType.equalsIgnoreCase("IRD")) {
                                row = this.getXtraRewardsTxnVO2().createRow();
                            }
                            row.setAttribute("MerchantId",jsonObjectXRTxnDetRow.isNull("MID") ? null : jsonObjectXRTxnDetRow.get("MID"));
                            row.setAttribute("MerchantLocation",jsonObjectXRTxnDetRow.isNull("MerchantLocation") ? null : jsonObjectXRTxnDetRow.get("MerchantLocation"));
                            row.setAttribute("TxnId",jsonObjectXRTxnDetRow.isNull("TID") ? null : jsonObjectXRTxnDetRow.get("TID"));
                            row.setAttribute("TxnAmt",jsonObjectXRTxnDetRow.isNull("TransactionAmount") ? null : jsonObjectXRTxnDetRow.get("TransactionAmount"));
                            row.setAttribute("TxnProductName",jsonObjectXRTxnDetRow.isNull("ProductName") ? null : jsonObjectXRTxnDetRow.get("ProductName"));
                            row.setAttribute("TxnPointsEarned",jsonObjectXRTxnDetRow.isNull("Points") ? null : jsonObjectXRTxnDetRow.get("Points"));
                            row.setAttribute("TxnPointsReedeem",jsonObjectXRTxnDetRow.isNull("Points") ? null : jsonObjectXRTxnDetRow.get("Points"));
                            row.setAttribute("TxnDateTime",jsonObjectXRTxnDetRow.isNull("TransactionDateTime") ? null : ModelUtils.changeDateParse(String.valueOf(jsonObjectXRTxnDetRow.get("TransactionDateTime"))));

                            if (transactionType.equalsIgnoreCase("TXN")) {
                                this.getXtraRewardsTxnVO1().insertRow(row);
                            } else if (transactionType.equalsIgnoreCase("IRD")) {
                                this.getXtraRewardsTxnVO2().insertRow(row);
                            }
                        }
                    }
                }
            }   
        }  
    }

    /**
     * Container's getter for SvLpgStoveProductVo1.
     * @return SvLpgStoveProductVo1
     */
    public ViewObjectImpl getSvLpgStoveProductVo1() {
        return (ViewObjectImpl) findViewObject("SvLpgStoveProductVo1");
    }

    /**
     * Container's getter for SvLpgHoseProductVo1.
     * @return SvLpgHoseProductVo1
     */
    public ViewObjectImpl getSvLpgHoseProductVo1() {
        return (ViewObjectImpl) findViewObject("SvLpgHoseProductVo1");
    }

    /**
     * Container's getter for EnrollmentDbVo1.
     * @return EnrollmentDbVo1
     */
    public EnrollmentDbVoImpl getEnrollmentDbVo1() {
        return (EnrollmentDbVoImpl) findViewObject("EnrollmentDbVo1");
    }

    /**
     * Container's getter for VehicleDetailsDbVo1.
     * @return VehicleDetailsDbVo1
     */
    public ViewObjectImpl getVehicleDetailsDbVo1() {
        return (ViewObjectImpl) findViewObject("VehicleDetailsDbVo1");
    }

    /**
     * Container's getter for FindYourOilVO1.
     * @return FindYourOilVO1
     */
    public ViewObjectImpl getFindYourOilVO1() {
        return (ViewObjectImpl) findViewObject("FindYourOilVO1");
    }

    /**
     * Container's getter for LovMakeVO1.
     * @return LovMakeVO1
     */
    public ViewObjectImpl getLovMakeVO1() {
        return (ViewObjectImpl) findViewObject("LovMakeVO1");
    }

    /**
     * Container's getter for LovModelVO1.
     * @return LovModelVO1
     */
    public ViewObjectImpl getLovModelVO1() {
        return (ViewObjectImpl) findViewObject("LovModelVO1");
    }

    /**
     * Container's getter for LovVehicleTypeVO1.
     * @return LovVehicleTypeVO1
     */
    public ViewObjectImpl getLovVehicleTypeVO1() {
        return (ViewObjectImpl) findViewObject("LovVehicleTypeVO1");
    }

    /**
     * Container's getter for FindYourStockistVO1.
     * @return FindYourStockistVO1
     */
    public ViewObjectImpl getFindYourStockistVO1() {
        return (ViewObjectImpl) findViewObject("FindYourStockistVO1");
    }

    /**
     * Container's getter for SearchStockistEVO1.
     * @return SearchStockistEVO1
     */
    public SearchStockistEVOImpl getSearchStockistEVO1() {
        return (SearchStockistEVOImpl) findViewObject("SearchStockistEVO1");
    }

    /**
     * Container's getter for AOLocatorVO1.
     * @return AOLocatorVO1
     */
    public AOLocatorVOImpl getAOLocatorVO1() {
        return (AOLocatorVOImpl) findViewObject("AOLocatorVO1");
    }

    /**
     * Container's getter for PartnerLocatorVO1.
     * @return PartnerLocatorVO1
     */
    public PartnerLocatorVOImpl getPartnerLocatorVO1() {
        return (PartnerLocatorVOImpl) findViewObject("PartnerLocatorVO1");
    }
}

